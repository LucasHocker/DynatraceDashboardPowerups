if("undefined"==typeof INJECTED){const e=!0;e&&console.log("Powerup: Dashboard powerups installed."),window.jQuery||console.log("Powerup: ERROR - No jQuery..."),$(document).ready(function(){e&&console.log("Powerup: document ready"),$(window).on("load hashchange",powerupListener),e&&console.log("Powerup: listener loaded"),powerupListener()});const o=chrome.runtime.getURL("");var timeout,waits=0;function powerupListener(){window.location.hash.startsWith("#dashboard;")||window.location.hash.startsWith("#dashboard/dashboard;")?(e&&console.log("Powerup: on a dashboard, power-up!"),window.requestAnimationFrame(powerupDashboards)):e&&console.log("Powerup: not a dashboard, quit.")}function powerupDashboards(){if("complete"==document.readyState&&$('[uitestid="gwt-debug-dashboardGrid"]').length&&!$(".loader").length&&!$('[uitestid="gwt-debug-tileLoader"]:visible').length){e&&console.log("Powerup: things look ready, begin power-ups...");let t=loadConfig();return injectClientsideLib(),injectCSS(),e&&console.log("Powerup: clientside libs injected."),void $.when(t).done(function(e){injectOtherModules(e),injectHighchartsModules(e),injectD3Modules(e),injectClientsideString(`\n            DashboardPowerups.POWERUP_EXT_URL='${o}';\n            DashboardPowerups.config = ${JSON.stringify(e)};\n            //DashboardPowerups.fireAllPowerUps();\n            DashboardPowerups.GridObserver.launchGridObserver();\n            `),console.log("Powerup: powerups complete.")})}waits++,waits%10==0&&console.log(`Powerup: WARN - still doesn't look like things are loaded yet, slept ${waits}s.`),clearTimeout(timeout),timeout=setTimeout(powerupDashboards,1e3)}function injectClientsideLib(){if(!$("#DashboardPowerupsTag").length)$("<script>").attr("id","DashboardPowerupsTag").attr("src",chrome.runtime.getURL("clientside.min.js")).appendTo("body")}function injectClientsideString(e){let o=uniqId(),t=`\n        function injectedFunction${o}(tries=0){\n            if(typeof(DashboardPowerups) == "object"){\n                ${e}\n            } else {\n                tries++;\n                if(tries>20){\n                    console.log("Powerup: FATAL client lib never loaded.");\n                    return false;\n                } else\n                    setTimeout(()=>{injectedFunction${o}(tries)},50);\n            }\n        }\n        injectedFunction${o}();`;$("<script>").append(document.createTextNode(t)).appendTo("body")}var uniqId=function(){var e=0;return function(){return e++}}();function injectCSS(){if($("#PowerUpCSS").length<1)$("<link>").attr("id","PowerUpCSS").attr("rel","stylesheet").attr("type","text/css").attr("href",o+"powerup.css").appendTo("head")}function loadConfig(){let e=$.Deferred(),o={Powerups:{}};return chrome.storage.local.get(["Powerups"],function(t){t&&t.Powerups?(t.Powerups.debug&&console.log("Powerup: POWERUPDEBUG - (extside) config from storage is: "+JSON.stringify(t)),e.resolve(t)):(console.log("Powerup: WARN - stored config format didn't match, defaulting..."),writeConfig(o),e.resolve(o))}),chrome.runtime.onMessage.addListener(function(e,o,t){"UpdateConfig"==e.Powerup&&chrome.storage.local.get(["Powerups"],function(e){let o=`DashboardPowerups.config = ${JSON.stringify(e)};`;injectClientsideString(o),t({Powerup:"InjectedUpdatedConfig"})})}),e}function writeConfig(e){chrome.storage.local.set(e,function(){e.Powerups.debug&&console.log("Powerup: (extside) config storage set to "+JSON.stringify(e))})}function injectHighchartsModule(e){let t="HighchartsMod_"+e,n=`${o}3rdParty/Highcharts/modules/6.2.0/${e}.js`;if(!$("#"+t).length){$("<script>").attr("id",t).attr("src",n).appendTo("body")}}function injectHighchartsModules(e){e.Powerups.heatmapPU&&(injectHighchartsModule("heatmap"),injectClientsideString('\n            //Highcharts Heatmap bug workaround\n            Highcharts.charts\n                .filter(x=>typeof(x)!=="undefined")\n                .filter(x=>typeof(x.colorAxis)=="undefined")\n                .forEach(x=>{x.colorAxis=[];});\n            ')),e.Powerups.sankeyPU&&injectHighchartsModule("sankey"),e.Powerups.treemapPU&&injectHighchartsModule("treemap")}function injectD3Modules(e){e.Powerups.funnelPU&&injectD3Module("d3-funnel.min.js")}function injectD3Module(e){let t="D3_"+e,n=`${o}3rdParty/D3/${e}`;if(!$("#"+t).length){$("<script>").attr("id",t).attr("src",n).appendTo("body")}}function injectOtherModules(e){e.Powerups.sankeyPU&&injectOtherModule("3rdParty/node_modules/@iconfu/svg-inject/dist/svg-inject.min.js","SVGInject"),e.Powerups.mathPU&&injectOtherModule("3rdParty/node_modules/math-expression-evaluator/dist/browser/math-expression-evaluator.min.js","mexp"),e.Powerups.datePU&&injectOtherModule("3rdParty/date_fns.min.js","dateFns")}function injectOtherModule(e,t){let n=o+encodeURI(e);injectClientsideString(`\n        if (typeof (${t}) == "undefined" &&\n            ! $("#powerup_lib_${t}").length) {\n            $("<script>")\n                .attr("id", "powerup_lib_${t}")\n                .attr("src", "${n}" )\n                .appendTo("body");\n        }`)}INJECTED=!0}