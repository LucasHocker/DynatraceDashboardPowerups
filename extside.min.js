if("undefined"==typeof INJECTED){const POWERUPDEBUG=!1;POWERUPDEBUG&&console.log("Powerup: Dashboard powerups installed."),window.jQuery||console.log("Powerup: ERROR - No jQuery..."),$(document).ready((function(){POWERUPDEBUG&&console.log("Powerup: document ready"),$(window).on("load hashchange",powerupListener),POWERUPDEBUG&&console.log("Powerup: listener loaded"),powerupListener()}));const ext_url=chrome.runtime.getURL("");var waits=0,timeout;function powerupListener(){window.location.hash.startsWith("#dashboard;")||window.location.hash.startsWith("#dashboard/dashboard;")?(POWERUPDEBUG&&console.log("Powerup: on a dashboard, power-up!"),window.requestAnimationFrame(powerupDashboards)):POWERUPDEBUG&&console.log("Powerup: not a dashboard, quit.")}function powerupDashboards(){if("complete"==document.readyState&&$('[uitestid="gwt-debug-dashboardGrid"]').length&&!$(".loader").length&&!$('[uitestid="gwt-debug-tileLoader"]:visible').length){POWERUPDEBUG&&console.log("Powerup: things look ready, begin power-ups...");let config_p=loadConfig();return injectClientsideLib(),injectCSS(),POWERUPDEBUG&&console.log("Powerup: clientside libs injected."),void $.when(config_p).done((function(config){injectOtherModules(config),injectHighchartsModules(config),injectD3Modules(config),injectClientsideString(`\n            DashboardPowerups.POWERUP_EXT_URL='${ext_url}';\n            DashboardPowerups.config = ${JSON.stringify(config)};\n            DashboardPowerups.GridObserver.launchGridObserver();\n            `),console.log("Powerup: powerups complete.")}))}++waits%10==0&&console.log(`Powerup: WARN - still doesn't look like things are loaded yet, slept ${waits}s.`),clearTimeout(timeout),timeout=setTimeout(powerupDashboards,1e3)}function injectClientsideLib(){if(!$("#DashboardPowerupsTag").length){let lib=POWERUPDEBUG?chrome.runtime.getURL("clientside.js"):chrome.runtime.getURL("clientside.min.js");var $s=$("<script>").attr("id","DashboardPowerupsTag").attr("src",lib).appendTo("body")}}function injectClientsideString(s){let id=uniqId(),wrapped=`\n        function injectedFunction${id}(tries=0){\n            if(typeof(DashboardPowerups) == "object"){\n                ${s}\n            } else {\n                tries++;\n                if(tries>20){\n                    console.log("Powerup: FATAL client lib never loaded.");\n                    return false;\n                } else\n                    setTimeout(()=>{injectedFunction${id}(tries)},50);\n            }\n        }\n        injectedFunction${id}();`;var $s=$("<script>").append(document.createTextNode(wrapped)).appendTo("body")}var uniqId=function(){var i=0;return function(){return i++}}();function injectCSS(){if($("#PowerUpCSS").length<1)var $link=$("<link>").attr("id","PowerUpCSS").attr("rel","stylesheet").attr("type","text/css").attr("href",ext_url+"powerup.css").appendTo("head")}function loadConfig(){let p=$.Deferred(),defaultConfig={Powerups:{tooltipPU:!0,colorPU:!0,svgPU:!0,worldmapPU:!0,bannerPU:!0,usqlstackPU:!0,linePU:!0,heatmapPU:!0,sankeyPU:!0,funnelPU:!0,mathPU:!0,datePU:!0,gaugePU:!0,debug:!1,colorPUTarget:"Text",animateCritical:"3 Pulses",animateWarning:"Never"}};return chrome.storage.local.get(["Powerups"],(function(result){if(result&&result.Powerups&&Object.keys(defaultConfig.Powerups).length===Object.keys(result.Powerups).length)result.Powerups.debug&&console.log("Powerup: DEBUG - (extside) config from storage is: "+JSON.stringify(result)),p.resolve(result);else{if(console.log("Powerup: WARN - stored config format didn't match, merging..."),"object"==typeof result&&"object"==typeof result.Powerups)for(const[key,value]of Object.entries(result.Powerups))void 0!==defaultConfig[key]&&(defaultConfig[key]=value);writeConfig(defaultConfig),p.resolve(defaultConfig)}})),chrome.runtime.onMessage.addListener((function(request,sender,sendResponse){"UpdateConfig"==request.Powerup&&chrome.storage.local.get(["Powerups"],(function(result){let s;injectClientsideString(`DashboardPowerups.config = ${JSON.stringify(result)};`),sendResponse({Powerup:"InjectedUpdatedConfig"})}))})),p}function writeConfig(defaultConfig){chrome.storage.local.set(defaultConfig,(function(){defaultConfig.Powerups.debug&&console.log("Powerup: (extside) config storage set to "+JSON.stringify(defaultConfig))}))}function injectHighchartsModule(mod){let id="HighchartsMod_"+mod,src=`${ext_url}3rdParty/Highcharts/modules/6.2.0/${mod}.js`;if(!$("#"+id).length){let $s=$("<script>").attr("id",id).attr("src",src).appendTo("body")}}function injectHighchartsModules(config){config.Powerups.heatmapPU&&(injectHighchartsModule("heatmap"),injectClientsideString('\n            //Highcharts Heatmap bug workaround\n            Highcharts.charts\n                .filter(x=>typeof(x)!=="undefined")\n                .filter(x=>typeof(x.colorAxis)=="undefined")\n                .forEach(x=>{x.colorAxis=[];});\n            ')),config.Powerups.sankeyPU&&injectHighchartsModule("sankey"),config.Powerups.treemapPU&&injectHighchartsModule("treemap"),config.Powerups.gaugePU&&injectHighchartsModule("solid-gauge")}function injectD3Modules(config){config.Powerups.funnelPU&&injectD3Module("d3-funnel.min.js")}function injectD3Module(mod){let id="D3_"+mod,src=`${ext_url}3rdParty/D3/${mod}`;if(!$("#"+id).length){let $s=$("<script>").attr("id",id).attr("src",src).appendTo("body")}}function injectOtherModules(config){config.Powerups.sankeyPU&&injectOtherModule("3rdParty/node_modules/@iconfu/svg-inject/dist/svg-inject.min.js","SVGInject"),config.Powerups.mathPU&&injectOtherModule("3rdParty/node_modules/math-expression-evaluator/dist/browser/math-expression-evaluator.min.js","mexp"),config.Powerups.datePU&&injectOtherModule("3rdParty/date_fns.min.js","dateFns")}function injectOtherModule(mod,glob){let src;injectClientsideString(`\n        if (typeof (${glob}) == "undefined" &&\n            ! $("#powerup_lib_${glob}").length) {\n            $("<script>")\n                .attr("id", "powerup_lib_${glob}")\n                .attr("src", "${ext_url+encodeURI(mod)}" )\n                .appendTo("body");\n        }`)}INJECTED=!0}
//# sourceMappingURL=extside.min.js.map