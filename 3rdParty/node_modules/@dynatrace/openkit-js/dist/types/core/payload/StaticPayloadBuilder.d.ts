import { Configuration } from '../config/Configuration';
import { Payload } from './Payload';
export declare class StaticPayloadBuilder {
    static reportCrash(errorName: string, reason: string, stacktrace: string, sequenceNumber: number, timeSinceSessionStart: number): Payload;
    static startSession(sequenceNumber: number): Payload;
    static endSession(sequenceNumber: number, duration: number): Payload;
    static action(name: string, actionId: number, startSequenceNumber: number, endSequenceNumber: number, timeSinceSessionStart: number, duration: number): Payload;
    static reportNamedEvent(name: string, parentActionId: number, startSequenceNumber: number, timeSinceSessionStart: number): Payload;
    static applicationWidePrefix(config: Configuration): Payload;
    static sessionPrefix(prefix: Payload, sessionId: number, clientIpAddress: string, sessionStartTime: number): Payload;
    static mutable(multiplicity: number, transmissionTime: number): Payload;
    static reportValue(actionId: number, name: string, value: number | string | null | undefined, sequenceNumber: number, timeSinceSessionStart: number): Payload;
    static reportError(name: string, parentActionId: number, startSequenceNumber: number, timeSinceSessionStart: number, reason: string, errorValue: number): Payload;
    static identifyUser(userTag: string, sequenceNumber: number, timeSinceSessionStart: number): Payload;
    static webRequest(url: string, parentActionId: number, startSequenceNumber: number, timeSinceSessionStart: number, endSequenceNumber: number, duration: number, bytesSent: number, bytesReceived: number, responseCode: number): Payload;
    private static basicEventData;
}
//# sourceMappingURL=StaticPayloadBuilder.d.ts.map