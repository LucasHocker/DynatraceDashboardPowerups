import { CommunicationState } from '../beacon/CommunicationState';
import { Payload } from './Payload';
import { PayloadQueue } from './PayloadQueue';
export interface PayloadBuilderListener {
    added(payload: Payload): void;
}
export declare class PayloadBuilder {
    private readonly commState;
    private readonly queue;
    private readonly listeners;
    constructor(commState: CommunicationState);
    reportNamedEvent(name: string, actionId: number, sequenceNumber: number, timeSinceSessionStart: number): void;
    reportCrash(errorName: string, reason: string, stacktrace: string, startSequenceNumber: number, timeSinceSessionStart: number): void;
    reportError(name: string, reason: string, errorValue: number, parentActionId: number, startSequenceNumber: number, timeSinceSessionStart: number): void;
    reportValue(name: string, value: number | string | null | undefined, actionId: number, sequenceNumber: number, timeSinceSessionStart: number): void;
    identifyUser(userTag: string, startSequenceNumber: number, timeSinceSessionStart: number): void;
    action(name: string, actionId: number, startSequenceNumber: number, endSequenceNumber: number, timeSinceSessionStart: number, duration: number): void;
    startSession(startSequenceNumber: number): void;
    endSession(startSequenceNumber: number, duration: number): void;
    webRequest(url: string, parentActionId: number, startSequenceNumber: number, timeSinceSessionStart: number, endSequenceNumber: number, duration: number, bytesSent: number, bytesReceived: number, responseCode: number): void;
    getNextPayload(prefix: Payload, transmissionTime: number): Payload | undefined;
    getWebRequestTracerTag(actionId: number, sessionNumber: number, sequenceNumber: number, deviceId: string, appId: string): string;
    register(listener: PayloadBuilderListener): void;
    _push(payload: Payload): void;
    _getQueue(): PayloadQueue;
    private getCompletePrefix;
    private isCaptureDisabled;
    private isCaptureErrorsDisabled;
    private isCaptureCrashesDisabled;
}
//# sourceMappingURL=PayloadBuilder.d.ts.map