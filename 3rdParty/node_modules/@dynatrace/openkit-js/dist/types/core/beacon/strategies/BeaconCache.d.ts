import { SessionImpl } from '../../impl/SessionImpl';
import { PayloadBuilder } from '../../payload/PayloadBuilder';
import { CommunicationState } from '../CommunicationState';
export interface CacheEntry {
    readonly prefix: string;
    readonly communicationState: CommunicationState;
    readonly session: SessionImpl;
    readonly builder: PayloadBuilder;
    initialized: boolean;
}
export interface BeaconCache {
    getEntriesCopy(): CacheEntry[];
}
export declare class BeaconCacheImpl implements BeaconCache {
    private readonly entries;
    register(session: SessionImpl, prefix: string, payloadBuilder: PayloadBuilder, state: CommunicationState): CacheEntry;
    getAllUninitializedSessions(): CacheEntry[];
    getAllClosedSessions(): CacheEntry[];
    getAllInitializedSessions(): CacheEntry[];
    unregister(entry: CacheEntry): void;
    getEntriesCopy(): CacheEntry[];
}
//# sourceMappingURL=BeaconCache.d.ts.map