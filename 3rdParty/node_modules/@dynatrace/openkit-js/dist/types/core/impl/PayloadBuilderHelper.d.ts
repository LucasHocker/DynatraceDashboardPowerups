import { PayloadBuilder } from '../payload/PayloadBuilder';
import { TimestampProvider } from '../provider/TimestampProvider';
import { ActionImpl } from './ActionImpl';
import { WebRequestTracerImpl } from './WebRequestTracerImpl';
/**
 * Responsible for creating and holding all payload data for a session.
 */
export declare class PayloadBuilderHelper {
    readonly payloadBuilder: PayloadBuilder;
    private readonly sessionStartTime;
    private readonly timestampProvider;
    private readonly sequenceId;
    private readonly nextId;
    constructor(payloadBuilder: PayloadBuilder, sessionStartTime: number, timestampProvider?: TimestampProvider);
    createActionId(): number;
    createSequenceNumber(): number;
    startSession(): void;
    endSession(): void;
    addAction(action: ActionImpl): void;
    reportValue(action: ActionImpl, name: string, value: number | string | null | undefined): void;
    identifyUser(userTag: string): void;
    reportError(parentActionId: number, name: string, code: number, message: string): void;
    reportCrash(errorName: string, reason: string, stacktrace: string): void;
    reportEvent(actionId: number, name: string): void;
    currentTimestamp(): number;
    addWebRequest(webRequest: WebRequestTracerImpl, parentActionId: number): void;
    getWebRequestTracerTag(actionId: number, sessionNumber: number, sequenceNumber: number, deviceId: string, appId: string): string;
    private timeSinceSessionStart;
}
//# sourceMappingURL=PayloadBuilderHelper.d.ts.map