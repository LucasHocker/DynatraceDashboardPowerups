import { Action, Session, WebRequestTracer } from '../../api';
import { OpenKitConfiguration, PrivacyConfiguration } from '../config/Configuration';
import { PayloadBuilder } from '../payload/PayloadBuilder';
import { TimestampProvider } from '../provider/TimestampProvider';
import { PayloadBuilderHelper } from './PayloadBuilderHelper';
export declare class SessionImpl implements Session {
    readonly sessionId: number;
    private readonly config;
    readonly payloadData: PayloadBuilderHelper;
    private readonly openActions;
    private readonly logger;
    private _isShutdown;
    constructor(sessionId: number, payloadBuilder: PayloadBuilder, sessionStartTime: number, config: PrivacyConfiguration & OpenKitConfiguration, timestampProvider?: TimestampProvider);
    /**
     * @inheritDoc
     */
    end(): void;
    /**
     * @inheritDoc
     */
    identifyUser(userTag: string): void;
    /**
     * @inheritDoc
     */
    enterAction(actionName: string): Action;
    /**
     * @inheritDoc
     */
    reportError(name: string, code: number, message: string): void;
    /**
     * @inheritDoc
     */
    reportCrash(name: string, message: string, stacktrace: string): void;
    traceWebRequest(url: string): WebRequestTracer;
    isShutdown(): boolean;
    _getOpenActions(): Action[];
    _endAction(action: Action): void;
}
//# sourceMappingURL=SessionImpl.d.ts.map