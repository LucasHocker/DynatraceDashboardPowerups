import { LoggerFactory, WebRequestTracer } from '../../api';
import { PayloadBuilderHelper } from './PayloadBuilderHelper';
export declare const createTag: (actionId: number, sessionNumber: number, sequenceNumber: number, serverId: number, deviceId: string, appId: string) => string;
export declare class WebRequestTracerImpl implements WebRequestTracer {
    private readonly payload;
    private readonly parentActionId;
    private readonly url;
    private readonly startSequenceNumber;
    private readonly tag;
    private readonly logger;
    private startTime;
    private endSequenceNumber;
    private endTime;
    private responseCode;
    private bytesSent;
    private bytesReceived;
    constructor(payload: PayloadBuilderHelper, actionId: number, url: string, logFactory: LoggerFactory, deviceId: string, appId: string, sessionNumber: number);
    getTag(): string;
    setBytesReceived(bytesReceived: number): this;
    setBytesSent(bytesSent: number): this;
    start(): this;
    stop(responseCode: number): void;
    getUrl(): string;
    getDuration(): number;
    getStart(): number;
    getResponseCode(): number;
    getBytesReceived(): number;
    getBytesSent(): number;
    getEndSequenceNumber(): number;
    getStartSequenceNumber(): number;
    private isStopped;
}
//# sourceMappingURL=WebRequestTracerImpl.d.ts.map